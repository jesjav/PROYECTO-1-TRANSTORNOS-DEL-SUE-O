# -*- coding: utf-8 -*-
"""Análisis inicial

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WI8VQodj3CwGtkaEPH_dkhpwWzwtcvsT

primero: vamos a importar la base de datos Sleep_health_and_lifestyle_dataset
"""

import pandas as pd
# Función : Importa la librería pandas bajo el alias pd
df = pd.read_csv('Sleep_health_and_lifestyle_dataset.csv')
#Función : Carga un archivo CSV.
print(df.head())
# unción : Muestra las primeras 5 filas del DataFrame
import plotly.express as px

# Muestra la información del DataFrame en formato de tabla
print(df.to_string())

"""Segundo:veremos si no hay datos nulos"""

# Verificar si hay valores nulos en el DataFrame
print(df.isnull().sum())

"""Vemos que existen datos nulos en la casilla Sleep Disorder, pero son personas que no tienen ningun desorden del sueño, asi que cambiaremos los datos nulos por No sleep disorder.


"""

# Rellenar los valores nulos en la columna 'Sleep Disorder' con 'Sin desorden del sueño'
df['Sleep Disorder'].fillna('No disorder', inplace=True)

# Verificar si hay valores nulos en el DataFrame
print(df.isnull().sum())

print(df.head())
# unción : Muestra las primeras 5 filas del DataFrame

"""Tercero: ya que quitamos los datos nulos es momento de seguir sacando mas informacion del data set.


"""

# Información general (tipos de datos, valores no nulos)
print(df.info())

# Estadísticas descriptivas básicas para columnas numéricas
print(df.describe())

"""ahora queremos saber el sexo, ocupacion y cuantos hay de cada uno"""

# Agrupar por ocupación y género, luego contar las ocurrencias
occupation_gender_counts = df.groupby(['Occupation', 'Gender']).size().unstack(fill_value=0)

occupation_gender_counts

# Filtrar el DataFrame para obtener solo las mujeres
women_df = df[df['Gender'] == 'Female']

# Agrupar las mujeres por ocupación y mostrar toda la información
women_occupation_tables = {}
for occupation in women_df['Occupation'].unique():
  women_occupation_tables[occupation] = women_df[women_df['Occupation'] == occupation]

# Imprimir las tablas para cada ocupación de mujeres
for occupation, table in women_occupation_tables.items():
  print(f"Información de mujeres con ocupación: {occupation}")
  print(table)


# Filtrar el DataFrame para obtener solo los hombres
men_df = df[df['Gender'] == 'Male']

# Seleccionar las columnas deseadas para los hombres (desde 'Person ID' hasta 'Sleep Disorder')
men_selected_columns = men_df.loc[:, 'Person ID':'Sleep Disorder']

# Agrupar a los hombres por ocupación y mostrar las columnas seleccionadas
men_occupation_tables = {}
for occupation in men_df['Occupation'].unique():
  men_occupation_tables[occupation] = men_selected_columns[men_df['Occupation'] == occupation]


# Imprimir las tablas para cada ocupación de hombres
for occupation, table in men_occupation_tables.items():
  print(f"\nInformación de hombres con ocupación: {occupation}")
  print(table) #se agrego un print para que se muestre la tabla

# prompt: quiero que hagas una histograma interactivo (con Plotly) para visualizar de  transtorno de sueño con hombres y mujeres y ocupaciones

import plotly.express as px

# Crear el histograma interactivo
fig = px.histogram(df, x="Sleep Disorder", color="Gender", barmode="group",
                   facet_col="Occupation",
                   title="Distribución de trastornos del sueño por género y ocupación",
                   labels={"Sleep Disorder": "Trastorno del Sueño", "Gender": "Género", "Occupation": "Ocupación"})

# Personalizar el diseño del histograma (opcional)
fig.update_layout(xaxis_title="Trastornos del Sueño", yaxis_title="Frecuencia")


# Mostrar el histograma
fig.show()